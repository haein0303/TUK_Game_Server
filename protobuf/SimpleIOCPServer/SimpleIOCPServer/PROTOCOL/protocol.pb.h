// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
class CS_LOGIN;
struct CS_LOGINDefaultTypeInternal;
extern CS_LOGINDefaultTypeInternal _CS_LOGIN_default_instance_;
class CS_MOVE;
struct CS_MOVEDefaultTypeInternal;
extern CS_MOVEDefaultTypeInternal _CS_MOVE_default_instance_;
class SC_LOGIN_OK;
struct SC_LOGIN_OKDefaultTypeInternal;
extern SC_LOGIN_OKDefaultTypeInternal _SC_LOGIN_OK_default_instance_;
class SC_POS;
struct SC_POSDefaultTypeInternal;
extern SC_POSDefaultTypeInternal _SC_POS_default_instance_;
class SC_PUT_OBJECT;
struct SC_PUT_OBJECTDefaultTypeInternal;
extern SC_PUT_OBJECTDefaultTypeInternal _SC_PUT_OBJECT_default_instance_;
class SC_REMOVE_OBJECT;
struct SC_REMOVE_OBJECTDefaultTypeInternal;
extern SC_REMOVE_OBJECTDefaultTypeInternal _SC_REMOVE_OBJECT_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CS_LOGIN* Arena::CreateMaybeMessage<::CS_LOGIN>(Arena*);
template<> ::CS_MOVE* Arena::CreateMaybeMessage<::CS_MOVE>(Arena*);
template<> ::SC_LOGIN_OK* Arena::CreateMaybeMessage<::SC_LOGIN_OK>(Arena*);
template<> ::SC_POS* Arena::CreateMaybeMessage<::SC_POS>(Arena*);
template<> ::SC_PUT_OBJECT* Arena::CreateMaybeMessage<::SC_PUT_OBJECT>(Arena*);
template<> ::SC_REMOVE_OBJECT* Arena::CreateMaybeMessage<::SC_REMOVE_OBJECT>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Direction : int {
  UP = 0,
  DOWN = 1,
  LEFT = 2,
  RIGHT = 3,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = UP;
constexpr Direction Direction_MAX = RIGHT;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
// ===================================================================

class SC_LOGIN_OK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_LOGIN_OK) */ {
 public:
  inline SC_LOGIN_OK() : SC_LOGIN_OK(nullptr) {}
  ~SC_LOGIN_OK() override;
  explicit PROTOBUF_CONSTEXPR SC_LOGIN_OK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_LOGIN_OK(const SC_LOGIN_OK& from);
  SC_LOGIN_OK(SC_LOGIN_OK&& from) noexcept
    : SC_LOGIN_OK() {
    *this = ::std::move(from);
  }

  inline SC_LOGIN_OK& operator=(const SC_LOGIN_OK& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_LOGIN_OK& operator=(SC_LOGIN_OK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_LOGIN_OK& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_LOGIN_OK* internal_default_instance() {
    return reinterpret_cast<const SC_LOGIN_OK*>(
               &_SC_LOGIN_OK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SC_LOGIN_OK& a, SC_LOGIN_OK& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_LOGIN_OK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_LOGIN_OK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_LOGIN_OK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_LOGIN_OK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_LOGIN_OK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_LOGIN_OK& from) {
    SC_LOGIN_OK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_LOGIN_OK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_LOGIN_OK";
  }
  protected:
  explicit SC_LOGIN_OK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SC_LOGIN_OK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_POS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_POS) */ {
 public:
  inline SC_POS() : SC_POS(nullptr) {}
  ~SC_POS() override;
  explicit PROTOBUF_CONSTEXPR SC_POS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_POS(const SC_POS& from);
  SC_POS(SC_POS&& from) noexcept
    : SC_POS() {
    *this = ::std::move(from);
  }

  inline SC_POS& operator=(const SC_POS& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_POS& operator=(SC_POS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_POS& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_POS* internal_default_instance() {
    return reinterpret_cast<const SC_POS*>(
               &_SC_POS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SC_POS& a, SC_POS& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_POS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_POS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_POS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_POS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_POS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_POS& from) {
    SC_POS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_POS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_POS";
  }
  protected:
  explicit SC_POS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kMoveTimeFieldNumber = 4,
    kYFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int64 move_time = 4;
  void clear_move_time();
  int64_t move_time() const;
  void set_move_time(int64_t value);
  private:
  int64_t _internal_move_time() const;
  void _internal_set_move_time(int64_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SC_POS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t x_;
    int64_t move_time_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_PUT_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_PUT_OBJECT) */ {
 public:
  inline SC_PUT_OBJECT() : SC_PUT_OBJECT(nullptr) {}
  ~SC_PUT_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR SC_PUT_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_PUT_OBJECT(const SC_PUT_OBJECT& from);
  SC_PUT_OBJECT(SC_PUT_OBJECT&& from) noexcept
    : SC_PUT_OBJECT() {
    *this = ::std::move(from);
  }

  inline SC_PUT_OBJECT& operator=(const SC_PUT_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_PUT_OBJECT& operator=(SC_PUT_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_PUT_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_PUT_OBJECT* internal_default_instance() {
    return reinterpret_cast<const SC_PUT_OBJECT*>(
               &_SC_PUT_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SC_PUT_OBJECT& a, SC_PUT_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_PUT_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_PUT_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_PUT_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_PUT_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_PUT_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_PUT_OBJECT& from) {
    SC_PUT_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_PUT_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_PUT_OBJECT";
  }
  protected:
  explicit SC_PUT_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kOTypeFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 o_type = 4;
  void clear_o_type();
  int32_t o_type() const;
  void set_o_type(int32_t value);
  private:
  int32_t _internal_o_type() const;
  void _internal_set_o_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SC_PUT_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t x_;
    int32_t y_;
    int32_t o_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class SC_REMOVE_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SC_REMOVE_OBJECT) */ {
 public:
  inline SC_REMOVE_OBJECT() : SC_REMOVE_OBJECT(nullptr) {}
  ~SC_REMOVE_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR SC_REMOVE_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_REMOVE_OBJECT(const SC_REMOVE_OBJECT& from);
  SC_REMOVE_OBJECT(SC_REMOVE_OBJECT&& from) noexcept
    : SC_REMOVE_OBJECT() {
    *this = ::std::move(from);
  }

  inline SC_REMOVE_OBJECT& operator=(const SC_REMOVE_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_REMOVE_OBJECT& operator=(SC_REMOVE_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_REMOVE_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_REMOVE_OBJECT* internal_default_instance() {
    return reinterpret_cast<const SC_REMOVE_OBJECT*>(
               &_SC_REMOVE_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SC_REMOVE_OBJECT& a, SC_REMOVE_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_REMOVE_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_REMOVE_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SC_REMOVE_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SC_REMOVE_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_REMOVE_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SC_REMOVE_OBJECT& from) {
    SC_REMOVE_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_REMOVE_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SC_REMOVE_OBJECT";
  }
  protected:
  explicit SC_REMOVE_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SC_REMOVE_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_LOGIN) */ {
 public:
  inline CS_LOGIN() : CS_LOGIN(nullptr) {}
  ~CS_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR CS_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_LOGIN(const CS_LOGIN& from);
  CS_LOGIN(CS_LOGIN&& from) noexcept
    : CS_LOGIN() {
    *this = ::std::move(from);
  }

  inline CS_LOGIN& operator=(const CS_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_LOGIN& operator=(CS_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_LOGIN* internal_default_instance() {
    return reinterpret_cast<const CS_LOGIN*>(
               &_CS_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CS_LOGIN& a, CS_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_LOGIN& from) {
    CS_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_LOGIN";
  }
  protected:
  explicit CS_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // @@protoc_insertion_point(class_scope:CS_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class CS_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CS_MOVE) */ {
 public:
  inline CS_MOVE() : CS_MOVE(nullptr) {}
  ~CS_MOVE() override;
  explicit PROTOBUF_CONSTEXPR CS_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_MOVE(const CS_MOVE& from);
  CS_MOVE(CS_MOVE&& from) noexcept
    : CS_MOVE() {
    *this = ::std::move(from);
  }

  inline CS_MOVE& operator=(const CS_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_MOVE& operator=(CS_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_MOVE* internal_default_instance() {
    return reinterpret_cast<const CS_MOVE*>(
               &_CS_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CS_MOVE& a, CS_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CS_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CS_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CS_MOVE& from) {
    CS_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CS_MOVE";
  }
  protected:
  explicit CS_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveTimeFieldNumber = 2,
    kDirFieldNumber = 1,
  };
  // int64 move_time = 2;
  void clear_move_time();
  int64_t move_time() const;
  void set_move_time(int64_t value);
  private:
  int64_t _internal_move_time() const;
  void _internal_set_move_time(int64_t value);
  public:

  // .Direction dir = 1;
  void clear_dir();
  ::Direction dir() const;
  void set_dir(::Direction value);
  private:
  ::Direction _internal_dir() const;
  void _internal_set_dir(::Direction value);
  public:

  // @@protoc_insertion_point(class_scope:CS_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t move_time_;
    int dir_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SC_LOGIN_OK

// int32 id = 1;
inline void SC_LOGIN_OK::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SC_LOGIN_OK::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SC_LOGIN_OK::id() const {
  // @@protoc_insertion_point(field_get:SC_LOGIN_OK.id)
  return _internal_id();
}
inline void SC_LOGIN_OK::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SC_LOGIN_OK::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_LOGIN_OK.id)
}

// int32 x = 2;
inline void SC_LOGIN_OK::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t SC_LOGIN_OK::_internal_x() const {
  return _impl_.x_;
}
inline int32_t SC_LOGIN_OK::x() const {
  // @@protoc_insertion_point(field_get:SC_LOGIN_OK.x)
  return _internal_x();
}
inline void SC_LOGIN_OK::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void SC_LOGIN_OK::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SC_LOGIN_OK.x)
}

// int32 y = 3;
inline void SC_LOGIN_OK::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t SC_LOGIN_OK::_internal_y() const {
  return _impl_.y_;
}
inline int32_t SC_LOGIN_OK::y() const {
  // @@protoc_insertion_point(field_get:SC_LOGIN_OK.y)
  return _internal_y();
}
inline void SC_LOGIN_OK::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void SC_LOGIN_OK::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SC_LOGIN_OK.y)
}

// -------------------------------------------------------------------

// SC_POS

// int32 id = 1;
inline void SC_POS::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SC_POS::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SC_POS::id() const {
  // @@protoc_insertion_point(field_get:SC_POS.id)
  return _internal_id();
}
inline void SC_POS::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SC_POS::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_POS.id)
}

// int32 x = 2;
inline void SC_POS::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t SC_POS::_internal_x() const {
  return _impl_.x_;
}
inline int32_t SC_POS::x() const {
  // @@protoc_insertion_point(field_get:SC_POS.x)
  return _internal_x();
}
inline void SC_POS::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void SC_POS::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SC_POS.x)
}

// int32 y = 3;
inline void SC_POS::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t SC_POS::_internal_y() const {
  return _impl_.y_;
}
inline int32_t SC_POS::y() const {
  // @@protoc_insertion_point(field_get:SC_POS.y)
  return _internal_y();
}
inline void SC_POS::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void SC_POS::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SC_POS.y)
}

// int64 move_time = 4;
inline void SC_POS::clear_move_time() {
  _impl_.move_time_ = int64_t{0};
}
inline int64_t SC_POS::_internal_move_time() const {
  return _impl_.move_time_;
}
inline int64_t SC_POS::move_time() const {
  // @@protoc_insertion_point(field_get:SC_POS.move_time)
  return _internal_move_time();
}
inline void SC_POS::_internal_set_move_time(int64_t value) {
  
  _impl_.move_time_ = value;
}
inline void SC_POS::set_move_time(int64_t value) {
  _internal_set_move_time(value);
  // @@protoc_insertion_point(field_set:SC_POS.move_time)
}

// -------------------------------------------------------------------

// SC_PUT_OBJECT

// int32 id = 1;
inline void SC_PUT_OBJECT::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SC_PUT_OBJECT::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SC_PUT_OBJECT::id() const {
  // @@protoc_insertion_point(field_get:SC_PUT_OBJECT.id)
  return _internal_id();
}
inline void SC_PUT_OBJECT::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SC_PUT_OBJECT::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_PUT_OBJECT.id)
}

// int32 x = 2;
inline void SC_PUT_OBJECT::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t SC_PUT_OBJECT::_internal_x() const {
  return _impl_.x_;
}
inline int32_t SC_PUT_OBJECT::x() const {
  // @@protoc_insertion_point(field_get:SC_PUT_OBJECT.x)
  return _internal_x();
}
inline void SC_PUT_OBJECT::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void SC_PUT_OBJECT::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SC_PUT_OBJECT.x)
}

// int32 y = 3;
inline void SC_PUT_OBJECT::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t SC_PUT_OBJECT::_internal_y() const {
  return _impl_.y_;
}
inline int32_t SC_PUT_OBJECT::y() const {
  // @@protoc_insertion_point(field_get:SC_PUT_OBJECT.y)
  return _internal_y();
}
inline void SC_PUT_OBJECT::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void SC_PUT_OBJECT::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SC_PUT_OBJECT.y)
}

// int32 o_type = 4;
inline void SC_PUT_OBJECT::clear_o_type() {
  _impl_.o_type_ = 0;
}
inline int32_t SC_PUT_OBJECT::_internal_o_type() const {
  return _impl_.o_type_;
}
inline int32_t SC_PUT_OBJECT::o_type() const {
  // @@protoc_insertion_point(field_get:SC_PUT_OBJECT.o_type)
  return _internal_o_type();
}
inline void SC_PUT_OBJECT::_internal_set_o_type(int32_t value) {
  
  _impl_.o_type_ = value;
}
inline void SC_PUT_OBJECT::set_o_type(int32_t value) {
  _internal_set_o_type(value);
  // @@protoc_insertion_point(field_set:SC_PUT_OBJECT.o_type)
}

// -------------------------------------------------------------------

// SC_REMOVE_OBJECT

// int32 id = 1;
inline void SC_REMOVE_OBJECT::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SC_REMOVE_OBJECT::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SC_REMOVE_OBJECT::id() const {
  // @@protoc_insertion_point(field_get:SC_REMOVE_OBJECT.id)
  return _internal_id();
}
inline void SC_REMOVE_OBJECT::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SC_REMOVE_OBJECT::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SC_REMOVE_OBJECT.id)
}

// -------------------------------------------------------------------

// CS_LOGIN

// string user_name = 1;
inline void CS_LOGIN::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& CS_LOGIN::user_name() const {
  // @@protoc_insertion_point(field_get:CS_LOGIN.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CS_LOGIN::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CS_LOGIN.user_name)
}
inline std::string* CS_LOGIN::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:CS_LOGIN.user_name)
  return _s;
}
inline const std::string& CS_LOGIN::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void CS_LOGIN::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CS_LOGIN::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CS_LOGIN::release_user_name() {
  // @@protoc_insertion_point(field_release:CS_LOGIN.user_name)
  return _impl_.user_name_.Release();
}
inline void CS_LOGIN::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CS_LOGIN.user_name)
}

// -------------------------------------------------------------------

// CS_MOVE

// .Direction dir = 1;
inline void CS_MOVE::clear_dir() {
  _impl_.dir_ = 0;
}
inline ::Direction CS_MOVE::_internal_dir() const {
  return static_cast< ::Direction >(_impl_.dir_);
}
inline ::Direction CS_MOVE::dir() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.dir)
  return _internal_dir();
}
inline void CS_MOVE::_internal_set_dir(::Direction value) {
  
  _impl_.dir_ = value;
}
inline void CS_MOVE::set_dir(::Direction value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:CS_MOVE.dir)
}

// int64 move_time = 2;
inline void CS_MOVE::clear_move_time() {
  _impl_.move_time_ = int64_t{0};
}
inline int64_t CS_MOVE::_internal_move_time() const {
  return _impl_.move_time_;
}
inline int64_t CS_MOVE::move_time() const {
  // @@protoc_insertion_point(field_get:CS_MOVE.move_time)
  return _internal_move_time();
}
inline void CS_MOVE::_internal_set_move_time(int64_t value) {
  
  _impl_.move_time_ = value;
}
inline void CS_MOVE::set_move_time(int64_t value) {
  _internal_set_move_time(value);
  // @@protoc_insertion_point(field_set:CS_MOVE.move_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Direction>() {
  return ::Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
